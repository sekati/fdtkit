<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************************************************************************
		FDTKit Buildfile v3.2.1
		
		Mar 9, 2008 - jason m horwitz | Sekati LLC | sekati.com
		
		Released under the MIT License: http://www.opensource.org/licenses/mit-license.php
		
		@see	http://fdtkit.googlecode.com/
		@see	http://sasapi.googlecode.com/
		@see	http://inde.googlecode.com/
		
		@note	Targeted for INDE/FDTKit this Buildfile can be used in standard Eclipse/FDT.
		
		@info	You *must* run this Buildfile in the same JRE as the workspace. To configure
		        this: Run -> External Tools -> JRE -> Run in the same JRE as the workspace
		        
		@usage	1. Copy build.xml file to your project root directory.
				2. Copy build/build.properties file to your project/build directory.
				3. Edit the build.xml project name attribute to reflect your project name.
				4. Edit the project/build/build.properties file to reflect your project settings.
				5. Edit the build.xml "build" target to point to the appropriate compile antcall.
				6. Add the build file to eclipse via the Ant panel view.
				7. Run the "create_project_structure" task to create a generic project structure. 
		        
		@warn	If using the "player-preview" task to preview the compiled swf in the debug
				player you will need to add your workspace as an allowed location in the flash
				security preference panel (which will pop up) and make sure compiler.use-network
				is set false. 			        
		        
     ************************************************************************************* -->

<project name="FDTKit Buildfile Template" default="build" basedir=".">


	<!-- DEFINITIONS -->
	<property file="/Applications/inde/workspace/fdtkit/build/default.properties"/>	
	<property file="build/build.properties"/>
	
	
	<!-- RESOURCE -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

	
	<!-- SANITY CHECK -->
	<target name="verify-properties">
		<fail unless="FDTKIT_HOME">The "FDTKIT_HOME" property must be set in build/build.properties.</fail>
	</target>
		
		
	<!-- DEFAULT TARGET: Customize call to your main project build -->
	
	<target name="build" description="Default project build target." depends="verify-properties">
		<antcall target="compile-flex"/>
		<!--
		<antcall target="compile-flex-debug"/>
		<antcall target="compile-swc"/>
		<antcall target="compile-flash"/>
		-->
	</target>	
	
	
	<!-- CORE COMPILATION, BUILD TARGETS -->	
	

	<target name="compile-flex" description="mxmlc compile and preview">
		<antcall target="compile-mxmlc-advanced">
			<param name="compiler.debug" value="false"/>
		</antcall>
		<antcall target="preview-player"/>
	</target>
	
		
	<target name="compile-flex-debug" description="mxmlc debug compile and preview">
		<antcall target="compile-mxmlc-advanced">
			<param name="compiler.debug" value="true"/>
		</antcall>
		<antcall target="preview-player"/>
	</target>
	
	
	<!-- BATCH AUTOMATIONS -->
	
	
    <target name="batch-document" description="Batch a set of documentation related tasks.">
        <antcall target="doc-asdoc"/>
        <antcall target="deploy-documentation"/>
    </target>
	
	
    <target name="batch-project" description="Batch a set of project related tasks.">
    	<antcall target="compile"/>
        <antcall target="deploy-project"/>
    </target>
	
	
	<!-- *************************************************************************************
		 							INTERNAL TARGETS BELOW			        
	     ************************************************************************************* -->
	
	
	<!-- AS3 COMPILATION -->	
	
	
	<target name="compile-mxmlc-basic" description="Basic compile AS3 project with mxmlc">
		<exec executable="${mxmlc.exe}" failonerror="true">
			<arg line ="-output ${project.swf}" />
			<arg line ="${project.class}" />
		</exec>
	</target>
	
	
	<!-- private: do not call directly -->
	<target name="compile-mxmlc-advanced" description="Compile actionscript application with mxmlc">
		<!--<echo>FDTKit MXMLC Compiler -> ${project.class}</echo>-->
		<mxmlc 
			file="${project.class}" 
			output="${project.swf}" 
			compiler.as3="${compiler.as3}"
			compiler.optimize="${compiler.optimize}"
			compiler.strict="${compiler.strict}"
			actionscript-file-encoding="${compiler.encoding}"
			keep-generated-actionscript="${compiler.keep-generated-as}"
			incremental="${compiler.incremental}"
			benchmark="${compiler.benchmark}"
			debug="${compiler.debug}"
			use-network="${compiler.use-network}"
			warnings="${compiler.warnings}"
			default-background-color="${project.bgcolor}">
		    <default-size width="${project.width}" height="${project.height}" />
			<metadata title="${project.meta.title}" description="${project.meta.description}" date="${project.meta.date}">
				<contributor name="${project.meta.contributor}" />
				<creator name="${project.meta.creator}" />
				<publisher name="${project.meta.publisher}" />
			</metadata>
			<compiler.external-library-path dir="${lib.swc.dir}">
			    <include name="**/*.swc" />
				<include name="${project.lib.linked}" />
				<exclude name="${project.lib.exclude}" />
			</compiler.external-library-path>
			<load-config filename="${compiler.config}"/>
		</mxmlc>
	</target>

	
	<!-- private: do not call directly -->
	<target name="generate-wrapper" description="Generate an HTML wrapper for SWF.">
		<property name="wrapper.dir" value="${TEMP_DIR}/${project.swf.prefix}"/>
		<echo>FDTKit Wrapper -> ${wrapper.dir}"</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${wrapper.dir}" includes="**/*" excludes="**/.svn"/>
		</delete>
		<mkdir dir="${wrapper.dir}"/>
		<html-wrapper
			title="${ant.project.name}"
			width="${project.wrapper.width}"
			height="${project.wrapper.height}"
			bgcolor="${project.wrapper.bgcolor}"
			application="${project.wrapper.name}"
			swf="${project.swf.prefix}"
	        version-major="${project.version.major}"
	        version-minor="${project.version.minor}"
	        version-revision="${project.version.revision}"
			history="${project.wrapper.history}"
			template="${project.wrapper.template}"
			output="${wrapper.dir}"
		/>
		<copy todir="${wrapper.dir}">
		  <fileset file="${project.swf}" excludes="**/.svn"/>
		</copy>		
	</target>	
	
	
	<!-- private: do not call directly -->
	<target name="preview-player" description="View the compile results in the player.">
		<!--<echo>FDTKit Player Preview -> ${player.args}: ${project.swf}</echo>-->
		<exec executable="${swfviewer.exe}" spawn="true">
			<arg line="${flashplayer.exe}"/>
			<arg line="${project.swf}"/>
		</exec>
		<!--
		<exec executable="${sys.open}" spawn="false">
			<arg line="${flashplayer.exe}"/>
			<arg line="${project.swf}"/>
		</exec>
		-->		
	</target>		

	
	<!-- private: do not call directly -->
	<target name="preview-browser" description="View the compile results in browser.">
		<echo>FDTKit Brower Preview -> ${browser.args}: ${project.preview.url}</echo>
		<exec executable="${sys.open}" spawn="true">
			<arg line="${browser.args}"/>
			<arg line="${project.preview.url}"/>
		</exec>	
	</target>
				
	
	<!-- private: do not call directly -->
	<target name="preview-wrapper" description="View the results of the generated wrapper in browser.">
		<echo>FDTKit Wrapper Preview -> ${browser.args}: file://${TEMP_DIR}/${project.swf.prefix}/index.html</echo>
		<exec executable="${sys.open}" spawn="true">
			<arg line="${browser.args}"/>
			<arg line="file://${TEMP_DIR}/${project.swf.prefix}/index.html"/>
		</exec>	
	</target>	
				
	
	<target name="compile-swc" description="Compile the project source to an SWC.">
		<echo>FDTKit SWC Compiler -> ${project.swc.source}</echo>
		<compc output="${project.swc}">
			<source-path path-element="${src.dir}" />
			<include-sources dir="${project.swc.source}" includes="*" excludes="**/.svn"/>
		</compc>
	</target>	
	
	
	<!-- IDE FLA COMPILATION -->	
	

	<target name="compile-flash" description="Compile the current, opened FLA with Flash IDE (clear's ASO cache and saves FLA)">
		<echo message="|*|*|*| class cache clear | source save | compiler start |*|*|*|"/>
		<exec executable="open">
			<arg line="${compile.jsfl}"/>
		</exec>	
	</target>
				
				
	<target name="compile-flash-fla" description="Compile project.fla application with Flash IDE">
		<fdt.flashCompile>
	        <fileset dir="${src.dir}">
	            <include name="${project.fla}"/>
	        </fileset>
	    </fdt.flashCompile>		
	</target>
	
	
	<target name="compile-flash-lib" description="Compile all fla's in lib dir with Flash IDE">
	    <fdt.flashCompile>
	        <fileset dir="${lib.dir}">
	        	 <include name="*.fla"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>
	
	
	<target name="compile-flash-src" description="compile all fla's in src dir with Flash IDE">
	    <fdt.flashCompile>
	        <fileset dir="${src.dir}">
	        	 <include name="*.fla"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>	
	
	
	<target name="compile-flash-tests" description="compile all fla's in tests dir with Flash IDE">
		 <fdt.flashCompile failonerror="false">
		   <fileset dir="${tests.dir}">
		    <include name="*.fla"/>
		   </fileset>
		  </fdt.flashCompile>
	</target>
	
	
	<!-- MTASC AS2 COMPILATION -->	
	
	
    <target name="compile-mtasc" description="Basic compile AS2 project with mtasc">
        <exec executable="${mtasc.exe}" dir="." failonerror="true">
            <arg line="-cp ${mtasc.corelib}"/>
            <arg line="-cp ${mtasc.classpath}"/>
            <arg line="-v -version ${mtasc.target_player} -mx -swf"/>
            <arg line="${project.swf} ${project.class}"/>
        </exec>
    </target>
	
	
	<!-- DOCUMENTATION -->

	
	<target name="doc-asdoc" description="Run asdoc to build documentation for AS3 projects.">
		<exec executable="${asdoc.exe}" failonerror="false">
			<arg line ="-source-path ${src.dir}" />
			<arg line='-source-path ${project.lib.linked}'/>
			<arg line='-doc-sources ${src.dir}/.'/>
			<arg line="-templates-path '${flex3sdk}/asdoc/templates'"/>
			<arg line="-main-title ${doc.asdoc.maintitle}"/>
			<arg line="-window-title ${doc.asdoc.windowtitle}"/>
		    <arg line="-footer ${doc.asdoc.footer}"/>
			<arg line='-output ${docs.dir}'/>
			<arg line='-exclude-classes=${doc.asdoc.excludes}'/>
		</exec>
		<copy todir="${docs.dir}/images">
		  <fileset dir="${flex3sdk}/asdoc/templates/images" excludes="**/.svn"/>
		</copy>
	</target>
				
				
	<target name="doc-asdoc-graph" description="Run asdoc to build xml for graphviz dot diagrams.">
		<exec executable="${asdoc.exe}" failonerror="false">
			<arg line = "-source-path ${src.dir}" />
			<arg line='-doc-sources ${src.dir}'/>
			<arg line='-output ${docs.dir}/graph'/>
			<arg line="-keep-xml"/>
			<arg line="-skip-xsl"/>
			<arg line="-show-actionscript-warnings=false"/>
			<arg line="-templates-path '${flex3sdk}/asdoc/templates'"/>
		</exec>
	</target>
	
	
	<target name="doc-as2api" description="Run AS2API to build documentation.">
		<exec dir="${as2api.dir}" executable="${ruby.exe}" failonerror="true">
			<arg line='${as2api.rb}'/>
			<arg line='package-spec ${doc.as2api.package}'/>
			<arg line='--classpath ${src.dir}'/>
			<arg line='--output-dir ${docs.dir}'/>
			<arg line='--title ${doc.asdoc.maintitle}'/>
			<arg line='--sources'/>
			<arg line='--progress'/>
        	<arg line='--draw-diagram'/>
        	<arg line='--dot-exe ${dot.exe}'/>
		</exec>
		<copy file="${fdtkit.template}/as2api/doc_sekati_index.html" tofile="${docs.dir}/index.html" overwrite="true"  failonerror="true"/>
		<copy file="${fdtkit.template}/as2api/doc_sekati_style.css" tofile="${docs.dir}/style.css" overwrite="true"  failonerror="true"/>
		<copy file="${fdtkit.template}/as2api/doc_sekati_unnatural.css" tofile="${docs.dir}/unnatural.css" overwrite="true"  failonerror="true"/>
	</target>	
	
	
	<target name="doc-clean" description="Remove all old documentation files.">
		<defaultexcludes echo="true"/>
		<delete includeemptydirs="true">
			<fileset dir="${docs.dir}" includes="**/*" excludes="**/.svn"/>
		</delete>	
	</target>			
	
	
	<!-- DEPLOYMENT-->	
	
	
	<target name="deploy-project" description="rsync+ssh project to target server.">
		<exec executable="${rsync.exe}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy.local.excludes}"/>
			<arg value="${deploy.local.dir}"/>
			<arg value="${deploy.remote.user}@${deploy.remote.host}:${deploy.remote.dir}"/>
		</exec>
	</target>	
	
	
	<target name="deploy-documentation" description="rsync+ssh documentation to target server.">
		<exec executable="${rsync.exe}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy.local.excludes}"/>
			<arg value="${deploy.local.doc.dir}"/>
			<arg value="${deploy.remote.user}@${deploy.remote.host}:${deploy.remote.doc.dir}"/>
		</exec>
	</target>

	
	<target name="deploy-backend" description="rsync+ssh project backend to target server.">
		<exec executable="${rsync.exe}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy.local.excludes}"/>
			<arg value="${deploy.local.backend.dir}"/>
			<arg value="${deploy.remote.user}@${deploy.remote.host}:${deploy.remote.backend.dir}"/>
		</exec>
	</target>	
	
	
	<!-- SUPPORT -->
	
	
    <target name="create-structure" description="Create a new project directory structure.">
    	<echo message="Creating Project Structure ..."/>
		<mkdir dir="${build.dir}"/>
    	<echo message="Creating: ${build.dir}"/>    	
		<mkdir dir="${deploy.dir}"/>
    	<echo message="Creating: ${deploy.dir}"/>
    	<mkdir dir="${deploy.admin.dir}"/>
    	<echo message="Creating: ${deploy.admin.dir}"/>
    	<mkdir dir="${deploy.assets.dir}"/>
    	<echo message="Creating: ${deploy.assets.dir}"/>
    	<mkdir dir="${deploy.css.dir}"/>
    	<echo message="Creating: ${deploy.css.dir}"/>
    	<mkdir dir="${deploy.js.dir}"/>
    	<echo message="Creating: ${deploy.js.dir}"/>
    	<mkdir dir="${deploy.php.dir}"/>
    	<echo message="Creating: ${deploy.php.dir}"/>
    	<mkdir dir="${deploy.xml.dir}"/>
    	<echo message="Creating: ${deploy.xml.dir}"/>    	
    	<mkdir dir="${docs.dir}"/>
    	<echo message="Creating: ${docs.dir}"/>
    	<mkdir dir="${lib.dir}"/>
    	<echo message="Creating: ${lib.dir}"/>
    	<mkdir dir="${lib.assets.dir}"/>
    	<echo message="Creating: ${lib.assets.dir}"/>
    	<mkdir dir="${lib.comps.dir}"/>
    	<echo message="Creating: ${lib.comps.dir}"/>
    	<mkdir dir="${lib.fonts.dir}"/>
    	<echo message="Creating: ${lib.fonts.dir}"/>
    	<mkdir dir="${lib.ia.dir}"/>
    	<echo message="Creating: ${lib.ia.dir}"/>    	
    	<mkdir dir="${lib.swc.dir}"/>
    	<echo message="Creating: ${lib.swc.dir}"/>
    	<mkdir dir="${tests.dir}"/>
    	<echo message="Creating: ${tests.dir}"/>
    	<mkdir dir="${src.dir}"/>
    	<echo message="Creating: ${src.dir}"/>
    	<echo message="Project Structure Created Successfully! Now refresh your project in Eclipse (right click on the project and select 'Refresh')"/>
    </target>
	
	
	<target name="sloc-count" description="count source lines of code.">
		<exec executable="${sloccount.sh}" />
	</target>	
	
	
	<!--
	<target name="input-test">
		<input
		    message="Do you want something?"
		    validargs="yes,no"
		    addproperty="do.delete"
		  />
		  <condition property="do.abort">
		    <equals arg1="no" arg2="${do.delete}"/>
		  </condition>
		  <fail if="do.abort">Build aborted by user.</fail>	
	</target>	
	-->
	
	
</project>