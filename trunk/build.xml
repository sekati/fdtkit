<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************************************************************************
		FDTKit Buildfile v3.1.0
		
		Mar 7, 2008 - jason m horwitz | Sekati LLC | sekati.com
		
		Released under the MIT License: http://www.opensource.org/licenses/mit-license.php
		
		@see	http://fdtkit.googlecode.com/
		@see	http://sasapi.googlecode.com/
		@see	http://inde.googlecode.com/
		
		@note	While targeted for INDE & FDTKit this Buildfile and its dependencies may
				be refactored for generic Eclipse & FDT3 use. If you would like to use it 
				on Windows simply install Cygwin and adjust the necessary path properties.
		
		@info	You must run this Buildfile in the same JRE as the workspace. To configure
		        this: Run -> External Tools -> JRE -> Run in the same JRE as the workspace
		        
		@usage	1. Copy this build.xml file to the root of your project directory.
				2. Copy the build/build.properties file to project/build
				3. Edit the build.xml project name attribute to reflect your project name.
				4. Edit the project/build/build.properties file to reflect your project settings.
				5. Add the build file to eclipse via the Ant panel view.
				6. Run the "create_project_structure" task to create a generic project structure. 
		        
     ************************************************************************************* -->

<project name="FDTKit Buildfile Template" default="build" basedir=".">


	<!-- DEFINITIONS -->
	<property file="build/fdtkit.properties"/>	
	<property file="build/build.properties"/>
	
	
	<!-- RESOURCE -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

	
	<!-- SANITY CHECK -->
	<target name="verify_properties">
		<fail unless="FDTKIT_HOME">The "FDTKIT_HOME" property must be set in build/build.properties.</fail>
	</target>
	
	
	<!-- AUTOMATION -->
	
    <target name="batch_document" description="batch run a set of documentation tasks">
        <antcall target="sloc_count"/>
        <antcall target="doc_asdoc"/>
        <antcall target="deploy_documentation"/>
    </target>
	
	
    <target name="batch_project" description="batch run a set of project tasks">
    	<antcall target="build_project"/>
        <antcall target="deploy_project"/>
    </target>	

	
	<!-- COMPILE & BUILD -->	
	
	
	<target name="build" description="Compile current opened fla in src dir with Flash IDE (clear's ASO cache and saves FLA)" depends="verify_properties">
		<echo message="|*|*|*| class cache clear | source save | compiler start |*|*|*|"/>
		<exec executable="open"><arg line="${compile.jsfl}"/></exec>
	</target>
	

	<target name="compile" description="mxmlc compile, generate wrapper, browser preview" depends="verify_properties">
		<antcall target="compile_as"/>
		<antcall target="generate_wrapper"/>
		<antcall target="browser_preview"/>
	</target>
		
	
	<target name="compile_as" description="Compile actionscript application with mxmlc" depends="verify_properties">
		<mxmlc 
			file="${project.class}" 
			output="${project.swf}" 
			compiler.as3="${compiler.as3}"
			compiler.optimize="${compiler.optimize}"
			compiler.strict="${compiler.strict}"
			actionscript-file-encoding="${compiler.encoding}"
			keep-generated-actionscript="${compiler.keep-generated-as}"
			incremental="${compiler.incremental}"
			benchmark="${compiler.benchmark}"
			debug="${compiler.debug}"
			use-network="${compiler.use-network}"
			warnings="${compiler.warnings}"
			default-background-color="${project.bgcolor}">
		    <default-size width="${project.width}" height="${project.height}" />
			<metadata title="${project.meta.title}" description="${project.meta.description}" date="${project.meta.date}">
				<contributor name="${project.meta.contributor}" />
				<creator name="${project.meta.creator}" />
				<publisher name="${project.meta.publisher}" />
			</metadata>
			<!-- adjust this area to fit your library needs -->
			<!--
			<compiler.external-library-path dir="${lib.dir}">
			    <include name="**/*.swc" />
			    <exclude name="not-this-one.swc" />
			</compiler.external-library-path>
			-->			
		</mxmlc>
	</target>
	

	<target name="generate_wrapper" description="Generate an HTML wrapper for SWF." depends="verify_properties">
	        <html-wrapper
	        	title="${ant.project.name}"
				width="${project.wrapper.width}"
				height="${project.wrapper.height}"
				bgcolor="${project.wrapper.bgcolor}"
				application="${project.wrapper.name}"
				swf="${app.swf}"
	        	version-major="${project.version.major}"
	        	version-minor="${project.version.minor}"
	        	version-revision="${project.version.revision}"
				history="${project.wrapper.history}"
				template="${project.wrapper.template}"
				output="${project.wrapper.output.dir}"
	        />
	</target>
	
	
	<target name="browser_preview" description="View the results of the generated wrapper in browser." depends="verify_properties">
		<exec executable="${browser}" spawn="true">
			<arg line="${browser.args}"/>
			<arg line="file:///${tests.dir}"/>
			<!--<arg line='${project.wrapper.output.dir}/index.html'/>-->
		</exec>	
	</target>	
	

	<target name="compile_fla" description="Compile fla application with Flash IDE" depends="verify_properties">
		<fdt.flashCompile>
	        <fileset dir="${src.dir}">
	            <include name="${project.fla}"/>
	        </fileset>
	    </fdt.flashCompile>		
	</target>
	
	
	<target name="compile_fla_lib" description="Compile all fla's in lib dir with Flash IDE" depends="verify_properties">
	    <fdt.flashCompile>
	        <fileset dir="${lib.dir}">
	        	 <include name="*.fla"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>
	
	
	<target name="compile_fla_src" description="compile all fla's in src dir with Flash IDE" depends="verify_properties">
	    <fdt.flashCompile>
	        <fileset dir="${src.dir}">
	        	 <include name="*.fla"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>	
	
	
	<target name="compile_fla_tests" description="compile all fla's in tests dir with Flash IDE" depends="verify_properties">
		 <fdt.flashCompile failonerror="false">
		   <fileset dir="${tests.dir}">
		    <include name="*.fla"/>
		   </fileset>
		  </fdt.flashCompile>
	</target>
	
	
    <target name="compile_mtasc" description="Basic compile AS2 project with mtasc" depends="verify_properties">
        <exec executable="${mtasc.exe}" dir="." failonerror="true">
            <arg line="-cp ${mtasc.corelib}"/>
            <arg line="-cp ${mtasc.classpath}"/>
            <arg line="-v -version ${mtasc.target_player} -mx -swf"/>
            <arg line="${project.swf} ${project.class}"/>
        </exec>
    </target>
	
	
	<target name="compile_mxmlc" description="Basic compile AS3 project with mxmlc" depends="verify_properties">
		<exec executable="${mxmlc.exe}" failonerror="true">
			<arg line ="-output ${project.swf}" />
			<arg line ="${project.class}" />
		</exec>
	</target>
	
	
	<!-- DOCUMENTATION -->

	
	<target name="doc_asdoc" description="Run asdoc to build documentation for AS3 projects." depends="verify_properties">
		<exec executable="${asdoc.exe}" failonerror="false">
			<arg line ="-source-path ${src.dir}" />
			<arg line='-source-path ${project.extra.lib}'/>
			<arg line='-doc-sources ${src.dir}/.'/>
			<arg line="-templates-path '${flex3sdk}/asdoc/templates'"/>
			<arg line="-main-title ${doc.asdoc.maintitle}"/>
			<arg line="-window-title ${doc.asdoc.windowtitle}"/>
		    <arg line="-footer ${doc.asdoc.footer}"/>
			<arg line='-output ${docs.dir}'/>
			<arg line='-exclude-classes=${doc.asdoc.excludes}'/>
		</exec>
		<copy todir="${docs.dir}/images">
		  <fileset dir="${flex3sdk}/asdoc/templates/images" excludes="**/.svn"/>
		</copy>
	</target>
				
				
	<target name="doc_graph" description="Run asdoc to build xml for graphviz dot diagrams." depends="verify_properties">
		<exec executable="${asdoc.exe}" failonerror="false">
			<arg line = "-source-path ${src.dir}" />
			<arg line='-doc-sources ${src.dir}'/>
			<arg line='-output ${docs.dir}/graph'/>
			<arg line="-keep-xml"/>
			<arg line="-skip-xsl"/>
			<arg line="-show-actionscript-warnings=false"/>
			<arg line="-templates-path '${flex3sdk}/asdoc/templates'"/>
		</exec>
	</target>
	
	
	<target name="doc_as2api" description="Run AS2API to build documentation." depends="verify_properties">
		<exec dir="${as2api.dir}" executable="${ruby.exe}" failonerror="true">
			<arg line='${as2api.rb}'/>
			<arg line='package-spec ${doc.as2api.package}'/>
			<arg line='--classpath ${src.dir}'/>
			<arg line='--output-dir ${docs.dir}'/>
			<arg line='--title ${doc.asdoc.maintitle}'/>
			<arg line='--sources'/>
			<arg line='--progress'/>
        	<arg line='--draw-diagram'/>
        	<arg line='--dot-exe ${dot.exe}'/>
		</exec>
		<copy file="${fdtkit.template}/as2api/doc_sekati_index.html" tofile="${docs.dir}/index.html" overwrite="true"  failonerror="true"/>
		<copy file="${fdtkit.template}/as2api/doc_sekati_style.css" tofile="${docs.dir}/style.css" overwrite="true"  failonerror="true"/>
		<copy file="${fdtkit.template}/as2api/doc_sekati_unnatural.css" tofile="${docs.dir}/unnatural.css" overwrite="true"  failonerror="true"/>
	</target>	
	
	
	<target name="doc_clean" description="Remove all old documentation files." depends="verify_properties">
		<defaultexcludes echo="true"/>
		<delete includeemptydirs="true">
			<fileset dir="${docs.dir}" includes="**/*" excludes="**/.svn"/>
		</delete>	
	</target>			
	
	
	<!-- DEPLOYMENT-->	
	
	
	<target name="deploy_project" description="rsync+ssh project to target server." depends="verify_properties">
		<exec executable="${rsync.exe}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy.local.excludes}"/>
			<arg value="${deploy.local.dir}"/>
			<arg value="${deploy.remote.user}@${deploy.remote.host}:${deploy.remote.dir}"/>
		</exec>
	</target>	
	
	
	<target name="deploy_documentation" description="rsync+ssh documentation to target server." depends="verify_properties">
		<exec executable="${rsync.exe}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy.local.excludes}"/>
			<arg value="${deploy.local.doc.dir}"/>
			<arg value="${deploy.remote.user}@${deploy.remote.host}:${deploy.remote.doc.dir}"/>
		</exec>
	</target>

	
	<target name="deploy_backend" description="rsync+ssh project backend to target server." depends="verify_properties">
		<exec executable="${rsync.exe}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy.local.excludes}"/>
			<arg value="${deploy.local.backend.dir}"/>
			<arg value="${deploy.remote.user}@${deploy.remote.host}:${deploy.remote.backend.dir}"/>
		</exec>
	</target>	
	
	
	<!-- SUPPORT -->
	
	
    <target name="create_structure" description="Create a new project directory structure." depends="verify_properties">
    	<echo message="Creating Project Structure ..."/>
		<mkdir dir="${build.dir}"/>
    	<echo message="Creating: ${build.dir}"/>    	
		<mkdir dir="${deploy.dir}"/>
    	<echo message="Creating: ${deploy.dir}"/>
    	<mkdir dir="${deploy.admin.dir}"/>
    	<echo message="Creating: ${deploy.admin.dir}"/>
    	<mkdir dir="${deploy.assets.dir}"/>
    	<echo message="Creating: ${deploy.assets.dir}"/>
    	<mkdir dir="${deploy.css.dir}"/>
    	<echo message="Creating: ${deploy.css.dir}"/>
    	<mkdir dir="${deploy.js.dir}"/>
    	<echo message="Creating: ${deploy.js.dir}"/>
    	<mkdir dir="${deploy.php.dir}"/>
    	<echo message="Creating: ${deploy.php.dir}"/>
    	<mkdir dir="${deploy.xml.dir}"/>
    	<echo message="Creating: ${deploy.xml.dir}"/>    	
    	<mkdir dir="${docs.dir}"/>
    	<echo message="Creating: ${docs.dir}"/>
    	<mkdir dir="${lib.dir}"/>
    	<echo message="Creating: ${lib.dir}"/>
    	<mkdir dir="${lib.assets.dir}"/>
    	<echo message="Creating: ${lib.assets.dir}"/>
    	<mkdir dir="${lib.comps.dir}"/>
    	<echo message="Creating: ${lib.comps.dir}"/>
    	<mkdir dir="${lib.fonts.dir}"/>
    	<echo message="Creating: ${lib.fonts.dir}"/>
    	<mkdir dir="${lib.ia.dir}"/>
    	<echo message="Creating: ${lib.ia.dir}"/>    	
    	<mkdir dir="${tests.dir}"/>
    	<echo message="Creating: ${tests.dir}"/>
    	<mkdir dir="${src.dir}"/>
    	<echo message="Creating: ${src.dir}"/>
    	<echo message="Project Structure Created Successfully! Now refresh your project in Eclipse (right click on the project and select 'Refresh')"/>
    </target>
	
	
	<target name="sloc_count" description="count source lines of code." depends="verify_properties">
		<exec executable="${sloccount.sh}" />
	</target>		

	
</project>